"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateJsonRPCObject = exports.post = exports.promiseTimeout = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var promiseTimeout = function promiseTimeout(ms, promise) {
  var timeout = new Promise(function (resolve, reject) {
    var id = setTimeout(function () {
      clearTimeout(id);
      reject(new Error('Timed out in ' + ms + 'ms'));
    }, ms);
  });
  return Promise.race([promise, timeout]);
};

exports.promiseTimeout = promiseTimeout;

var post = function post() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultOptions = {
    mode: 'cors',
    cache: 'no-cache',
    headers: {
      'Content-Type': 'application/json; charset=utf-8'
    },
    body: JSON.stringify(data)
  };

  var options = _objectSpread({}, defaultOptions, {}, opts, {}, {
    method: 'POST'
  });

  return promiseTimeout(12000, fetch(url, options).then(function (response) {
    if (response.ok) {
      return response.json();
    } else throw new Error('Could not connect', response);
  }));
};

exports.post = post;

var generateJsonRPCObject = function generateJsonRPCObject(method, params) {
  return {
    jsonrpc: '2.0',
    method: method,
    id: 10,
    params: params
  };
};

exports.generateJsonRPCObject = generateJsonRPCObject;