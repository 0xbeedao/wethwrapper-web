"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyAssign = exports.keyLookup = exports.thresholdSame = exports.kCombinations = void 0;

var _jsonStableStringify = _interopRequireDefault(require("json-stable-stringify"));

var _httpHelpers = require("./httpHelpers");

var _some = require("./some");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var kCombinations = function kCombinations(s, k) {
  var set = s;

  if (typeof set === 'number') {
    set = Array.from({
      length: set
    }, function (_, i) {
      return i;
    });
  }

  if (k > set.length || k <= 0) {
    return [];
  }

  if (k === set.length) {
    return [set];
  }

  if (k === 1) {
    return set.reduce(function (acc, cur) {
      return [].concat(_toConsumableArray(acc), [[cur]]);
    }, []);
  }

  var combs = [];
  var tailCombs = [];

  for (var i = 0; i <= set.length - k + 1; i++) {
    tailCombs = kCombinations(set.slice(i + 1), k - 1);

    for (var j = 0; j < tailCombs.length; j++) {
      combs.push([set[i]].concat(_toConsumableArray(tailCombs[j])));
    }
  }

  return combs;
};

exports.kCombinations = kCombinations;

var thresholdSame = function thresholdSame(arr, t) {
  var hashMap = {};

  for (var i = 0; i < arr.length; i++) {
    var str = (0, _jsonStableStringify["default"])(arr[i]);
    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;

    if (hashMap[str] === t) {
      return arr[i];
    }
  }

  return undefined;
};

exports.thresholdSame = thresholdSame;

var keyLookup = function keyLookup(endpoints, verifier, verifierId) {
  var lookupPromises = endpoints.map(function (x) {
    return (0, _httpHelpers.post)(x, (0, _httpHelpers.generateJsonRPCObject)('VerifierLookupRequest', {
      verifier: verifier,
      verifier_id: verifierId.toString().toLowerCase()
    }))["catch"](function (_) {
      return undefined;
    });
  });
  return (0, _some.Some)(lookupPromises, function (lookupResults) {
    var lookupShares = lookupResults.filter(function (x) {
      return x;
    });
    var errorResult = thresholdSame(lookupShares.map(function (x) {
      return x && x.error;
    }), ~~(endpoints.length / 2) + 1);
    var keyResult = thresholdSame(lookupShares.map(function (x) {
      return x && x.result;
    }), ~~(endpoints.length / 2) + 1);

    if (keyResult || errorResult) {
      return Promise.resolve({
        keyResult: keyResult,
        errorResult: errorResult
      });
    }

    return Promise.reject(new Error('invalid'));
  })["catch"](function (_) {
    return undefined;
  });
};

exports.keyLookup = keyLookup;

var keyAssign = function keyAssign(endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId) {
  var nodeNum, initialPoint;

  if (lastPoint === undefined) {
    nodeNum = Math.floor(Math.random() * endpoints.length);
    initialPoint = nodeNum;
  } else {
    nodeNum = lastPoint % endpoints.length;
  }

  if (nodeNum === firstPoint) throw new Error('Looped through all');
  if (firstPoint !== undefined) initialPoint = firstPoint;
  var data = (0, _httpHelpers.generateJsonRPCObject)('KeyAssign', {
    verifier: verifier,
    verifier_id: verifierId.toString().toLowerCase()
  });
  return (0, _httpHelpers.post)('https://signer.tor.us/api/sign', data, {
    headers: {
      pubKeyX: torusNodePubs[nodeNum].X,
      pubKeyY: torusNodePubs[nodeNum].Y
    }
  }).then(function (signedData) {
    return (0, _httpHelpers.post)(endpoints[nodeNum], _objectSpread({}, data, {}, signedData), {
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      }
    })["catch"](function (_) {
      return keyAssign(endpoints, torusNodePubs, nodeNum + 1, initialPoint, verifier, verifierId);
    });
  });
};

exports.keyAssign = keyAssign;