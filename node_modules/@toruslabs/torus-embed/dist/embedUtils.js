"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleStream = exports.handleEvent = exports.transformEthAddress = exports.htmlToElement = exports.runOnComplete = exports.runOnLoad = void 0;

var _this = void 0;

var runOnLoad = function runOnLoad(fn) {
  if (window.document.body != null) {
    fn();
  } else {
    window.document.addEventListener('DOMContentLoaded', fn);
  }
};

exports.runOnLoad = runOnLoad;

var runOnComplete = function runOnComplete(fn) {
  var retry = window.setInterval(function () {
    if (window.document.readyState === 'complete') {
      window.clearInterval(retry);
      fn();
    }
  }, 300);
};

exports.runOnComplete = runOnComplete;

var htmlToElement = function htmlToElement(html) {
  var template = window.document.createElement('template');
  var trimmedHtml = html.trim(); // Never return a text node of whitespace as the result

  template.innerHTML = trimmedHtml;
  return template.content.firstChild;
};

exports.htmlToElement = htmlToElement;

var transformEthAddress = function transformEthAddress(ethAddress) {
  // return ethAddress
  if (Array.isArray(ethAddress)) {
    return ethAddress.map(function (addr) {
      return typeof addr === 'string' ? addr.toLowerCase() : addr;
    });
  } else if (typeof ethAddress === 'string') {
    return ethAddress.toLowerCase();
  } else {
    throw new Error('Unexpected Ethereum address format');
  }
};

exports.transformEthAddress = transformEthAddress;

var handleEvent = function handleEvent(handle, eventName, handler, handlerArgs) {
  var handlerWrapper = function handlerWrapper() {
    handler.apply(_this, handlerArgs);
    handle.removeEventListener(eventName, handlerWrapper);
  };

  handle.addEventListener(eventName, handlerWrapper);
};

exports.handleEvent = handleEvent;

var handleStream = function handleStream(handle, eventName, handler) {
  var handlerWrapper = function handlerWrapper(chunk) {
    handler(chunk);
    handle.removeListener(eventName, handlerWrapper);
  };

  handle.on(eventName, handlerWrapper);
};

exports.handleStream = handleStream;